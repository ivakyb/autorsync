image: registry.gitlab.com/kyb/autorsync/autorsync-builder-alpine
## alpine with bash git openssh-client git-rev-label perl

before_script:
- function DEBUG { >&2 "$@" || true; }

build:
  stage: build
  script:
  - git checkout -B $CI_COMMIT_REF_NAME
  - ./BUILD
  - echo -e '\e[1;37m'$(./autorsync --version)'\e[0m'
  artifacts:
    paths: 
    - "autorsync"

test_before_build:
  stage: build
  image: ubuntu
  variables:
    AUTORSYNC: "$CI_PROJECT_DIR/autorsync.bash"
  script: &test_script
  #- git checkout -B $CI_COMMIT_REF_NAME
  - apt-get update -qyy && apt install -qyy --no-install-recommends openssh-server openssh-client ca-certificates perl rsync fswatch psmisc tree
  #- apk add --no-cache bash rsync fswatch openssh perl ca-certificates
  #- /usr/bin/ssh-keygen -A  ## For Alpine only, not for Ubuntu
  - ssh-keygen -o -t rsa -b 4096 -f ~/.ssh/id_rsa -P ""
  - cat ~/.ssh/id_rsa.pub >>~/.ssh/authorized_keys; chmod 600 ~/.ssh/authorized_keys
  - mkdir -p /run/sshd  ## Ubuntu only, fix a bug
  - /usr/sbin/sshd
  - ssh-keyscan -t rsa localhost >>~/.ssh/known_hosts; chmod 600 ~/.ssh/known_hosts
  #- ssh -vv -oPasswordAuthentication=no localhost echo test
  - ./test-autorsync.bash
  - ps -aux || true
      
    
test:
  stage: test
  dependencies: 
  - build
  image: ubuntu
  variables:
    AUTORSYNC: "$CI_PROJECT_DIR/autorsync"
  script: *test_script
  

npm_publish:
  stage: deploy
  image: alpine
  dependencies:
  - build
  variables:
    GIT_DEPTH: 1
    #GIT_STRATEGY: none
  only:
  - master
  script:
  - apk add --no-cache --update npm bash
  - DEBUG echo -e '\e[1;37m'$(./autorsync --version)'\e[0m'
  - NPM_VERSION="$( ./autorsync --npm-version )"
  - echo -e '\e[1;37m'"$NPM_VERSION"'\e[0m'
  - sed -i 's#"version":\s*".*"#"version":"'$NPM_VERSION'"#' package.json
  - DEBUG cat package.json
  - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >~/.npmrc  ## https://blog.npmjs.org/post/118393368555/deploying-with-npm-private-modules
  - npm publish .
  ## CHECK
  - npm install -g autorsync
  - test $(autorsync --version) = $(./autorsync --version)
  retry: 1

## --- STORE ARTIFACTS TO A DEDICATED BRANCH ---
store_artifacts:
  stage: deploy
  dependencies:
  - build
  variables:
    GIT_STRATEGY: none
    GIT_USER_EMAIL: autorsync-ci@gitlab.com
    GIT_USER_NAME: autorsync-ci
  script:
  ## --------- GET REV_LABEL ----------
  - REV_LABEL=$(./autorsync --version)
  - echo -e $'\e[1;37m' "$REV_LABEL" $'\e[0m'
  ## --------- URL --------------
  - echo "$KI" >/tmp/ki  &&  chmod 400 /tmp/ki
  - export GIT_SSH_COMMAND="ssh -i/tmp/ki -oStrictHostKeyChecking=no"
  - SSH_URL=$(echo "$CI_REPOSITORY_URL" | perl -pe 's#https://(.+?):(.+?)@(.+?)/(.+?).git#git@\3:\4.git#' )
  ## ---------- CLONE, ADD and COMMIT ---------------
  - git clone "$SSH_URL" --depth 1 --single-branch -b artifacts/$CI_COMMIT_REF_NAME ./artifacts  ||  { git init artifacts && git -C artifacts checkout --orphan artifacts/$CI_COMMIT_REF_NAME; }
  #- for f in autorsync ;do F="$REV_LABEL-$f"; ln $f artifacts/$F || { echo >&2 "Forced ln $f"; ln -f $f artifacts/$F; } && git -C artifacts add $F; done
  - ln -f autorsync artifacts/autorsync
  - echo "$REV_LABEL" >artifacts/README.md
  - cd artifacts
  - git add .
  - DEBUG git status 
  - git config --global user.email "$GIT_USER_EMAIL"
  - git config --global user.name "$GIT_USER_NAME"
  - git commit -m"$REV_LABEL"
  ## ------------ PUSH --------------
  - git push "$SSH_URL" HEAD:artifacts/$CI_COMMIT_REF_NAME #ToDo use $CI_REPOSITORY_URL
  ## ----------- EPILOG -----------
  - echo "See artifacts at "$'\e[1;37m'"$CI_PROJECT_URL/tree/artifacts/$CI_COMMIT_REF_NAME"$'\e[0m'


## ToDO use git ls-remote. No fetch required. Much faster on a big repos! GIT_STRATEGY: none
## git ls-remote --heads "$CI_REPOSITORY_URL" artifacts/\* | cut -d\t -f2 | sed 's#refs/heads/##'
remove_stale_artifacts:
  stage: deploy
  dependencies:
  image: alpine
  variables:
    GIT_CHECKOUT: "false"
    GIT_SUBMODULE_STRATEGY: none
  script:
  - apk add --no-cache git perl openssh-client
  - mkdir /temp  &&  mount -t tmpfs -o size=500m tmpfs /temp
  ## --- FIND STALED ARTIFACTS BRANCHES ---
  - git branch -r  --list origin/artifacts/\* | grep -v HEAD | sed -e s#origin/##g -Ee s#^\\s+##g >/temp/ARTIFACTS_BRANCHES
  - DEBUG cat /temp/ARTIFACTS_BRANCHES
  - git branch -r  --list origin/\*           | grep -v -e HEAD -e artifacts/| sed -e s#origin/##g -Ee s#^\\s+#artifacts/#g >/temp/BRANCHES
  - DEBUG cat /temp/BRANCHES
  - fgrep -vf /temp/BRANCHES /temp/ARTIFACTS_BRANCHES >/temp/STALE_ARTIFACTS_BRANCHES  ||  return 0
  - DEBUG cat /temp/STALE_ARTIFACTS_BRANCHES
  - PUSH_SPEC=$(sed -e 's#\s+##g' -e 's#^#:#g' /temp/STALE_ARTIFACTS_BRANCHES)
  - DEBUG echo "$PUSH_SPEC"
  ## --------- URL --------------
  - echo "$KI" >/tmp/ki  &&  chmod 400 /tmp/ki
  - export GIT_SSH_COMMAND="ssh -i/tmp/ki -oStrictHostKeyChecking=no"
  - SSH_URL=$(echo "$CI_REPOSITORY_URL" | perl -pe 's#https://(.+?):(.+?)@(.+?)/(.+?).git#git@\3:\4.git#' )
  - git push "$SSH_URL" $PUSH_SPEC
  retry: 1
